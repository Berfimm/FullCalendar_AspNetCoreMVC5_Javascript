#pragma checksum "C:\Users\berfim.korkmaz\source\repos\W2UIFullCalendarProject\W2UIFullCalendarProject\Views\PersonalWorkLog\FullCalendarView.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ca7b80a5267a5b1be58b1ccf38da04223f505ed9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_PersonalWorkLog_FullCalendarView), @"mvc.1.0.view", @"/Views/PersonalWorkLog/FullCalendarView.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\berfim.korkmaz\source\repos\W2UIFullCalendarProject\W2UIFullCalendarProject\Views\_ViewImports.cshtml"
using W2UIFullCalendarProject;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\berfim.korkmaz\source\repos\W2UIFullCalendarProject\W2UIFullCalendarProject\Views\_ViewImports.cshtml"
using W2UIFullCalendarProject.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\berfim.korkmaz\source\repos\W2UIFullCalendarProject\W2UIFullCalendarProject\Views\PersonalWorkLog\FullCalendarView.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ca7b80a5267a5b1be58b1ccf38da04223f505ed9", @"/Views/PersonalWorkLog/FullCalendarView.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8aa1299a84da52fd055c20d3f5285858df805f4d", @"/Views/_ViewImports.cshtml")]
    public class Views_PersonalWorkLog_FullCalendarView : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/fullcalender_3.10.2/w2ui.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/fullcalendar-6.1.8/dist/index.global.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/fullcalendar-6.1.8/packages/bootstrap5/index.global.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/fullcalendar-6.1.8/packages/core/locales/tr.global.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/fullcalendar-6.1.8/superhero_bootstrap.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/fullcalendar-6.1.8/dist/fullcalender.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\berfim.korkmaz\source\repos\W2UIFullCalendarProject\W2UIFullCalendarProject\Views\PersonalWorkLog\FullCalendarView.cshtml"
   Layout = null; 

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ca7b80a5267a5b1be58b1ccf38da04223f505ed96764", async() => {
                WriteLiteral("\r\n    <meta charset=\'utf-8\' />\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ca7b80a5267a5b1be58b1ccf38da04223f505ed97060", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ca7b80a5267a5b1be58b1ccf38da04223f505ed98238", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js\"></script>\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ca7b80a5267a5b1be58b1ccf38da04223f505ed99517", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ca7b80a5267a5b1be58b1ccf38da04223f505ed910616", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ca7b80a5267a5b1be58b1ccf38da04223f505ed911716", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ca7b80a5267a5b1be58b1ccf38da04223f505ed912895", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

    <script type=""module"">
        import { w2alert, w2popup, w2utils, w2ui, w2form, query } from '../fullcalender_3.10.2/w2ui.es6.min.js'
        w2utils.locale('/fullcalender_3.10.2/tr-tr.json');
        /////////////////////////////////////  CALENDER   ////////////////////////////////////////////////////
        var globalCalendarInstance;
        var allowedIds = [1,4,8]; // Replace with the allowed IDs
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                height: '100%',
                expandRows: true,
                themeSystem: 'bootstrap',
                stickyHeaderDates: true, // for disabling
                nowIndicator: true,
                unselectAuto: false,
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'timeGrid");
                WriteLiteral(@"Day,listDay,timeGridWeek,listWeek'//,dayGridMonth,multiMonthYear
                },
                locale: 'tr',
                views: {
                    listMonth: { buttonText: 'list month' },
                    listYear: { buttonText: 'list year' }
                },
                initialView: 'timeGridWeek',
                /*initialDate: '2023-01-12',*/
                selectMirror: true,
                editable: true,
                selectable: true,
                dayMaxEvents: true, // allow ""more"" link when too many events
                // multiMonthMaxColumns: 1, // guarantee single column
                // showNonCurrentDates: true,
                // fixedWeekCount: false,
                businessHours: {
                   /* daysOfWeek: [1, 2, 3, 4, 5], // Monday - Friday*/
                    startTime: '08:00', // Business hours start at 9:00 AM
                    endTime: '17:30' // Business hours end at 5:00 PM
                },
                //weekends");
                WriteLiteral(": false,\r\n                events: function (fetchInfo, successCallback, failureCallback) {\r\n                    fetch(\'/PersonalWorkLog/GetTodayPersonalData?persid=\'+ 1 ");
                WriteLiteral(@")
                    .then(function (response) {
                        return response.json();
                    })
                    .then(function (allData) {
                        var processedEvents = allData.map(function (event) {
                            return {
                                id: event.id,
                                title: event.wL_Title,
                                project: event.wL_Project,
                                description: event.wL_Description,
                                creatorName: event.wL_CreatedBy,
                                color: 'rgb(255,165,53,0.6)',// '#5389D6',
                                borderColor: 'rgb(255,165,53)',
                                start: moment(event.wL_StartDate).format(""YYYY-MM-DD HH:mm""),
                                end: moment(event.wL_FinishDate).format(""YYYY-MM-DD HH:mm""),
                            };
                        });
                        successCallback(process");
                WriteLiteral(@"edEvents);
                    })
                    .catch(function (error) {
                        failureCallback(error);
                    });
                },
                eventContent: function (arg) {
                   /* console.log(arg);*/
                    var eventContent =
                        '<div class=""custom-event-class"" style=""color: white; font-family: Calibri; background-color: #fc9047; font-weight: 600; padding: 0px 4px  0px 0px;border-radius:5px "">' +
                        arg.timeText + ' / ' + '<b>' + arg.event.title + '</b>' +
                        '</div>';
                    var eventContent1 =
                        '<div class=""custom-event-class"" style=""color: white; font-family: Calibri; font-weight: 600"">' +
                        arg.timeText + ' / ' + '<b>' + arg.event.title + '</b>' +
                        '</div>';

                    // Apply project information for timeGridWeek and timeGridDay views
                    if (arg.v");
                WriteLiteral(@"iew.type === 'timeGridWeek' || arg.view.type === 'timeGridDay') {
                        eventContent +=
                            '<div class=""custom-project-class"" style=""position: absolute; top: 0; right: 0; padding: 0px 4px 0px 0px; color: #2b3e50;font-weight:bold; font-family: Calibri; font-size: 12px;"">' +
                            arg.event.extendedProps.project +
                            '</div>';
                    }

                    // Apply project information for listWeek and listDay views
                    if (arg.view.type === 'listWeek' || arg.view.type === 'listDay') {
                        eventContent =
                            '<div class=""custom-project-class"" style=""background-color:tranparent; color: rgb(255, 165, 53); font-family: Calibri; font-size: 15px;font-weight: 800;"">' +
                            arg.event.extendedProps.project +
                            '</div>' +
                        eventContent1;
                    }


           ");
                WriteLiteral(@"         return { html: eventContent };
                },
                //resources: aa,
                select: function (arg) {
                    addEventPopup(arg)
                },
                eventDrop: function (info) {
                    sendDraggedResizedEventToController(info);
                },
                eventResize: function (info) {
                    sendDraggedResizedEventToController(info);
                },
                eventClick: function (arg) {
                    editEventPopup(arg)
                    //if (confirm('Are you sure you want to delete this event?')) {
                    //    arg.event.remove()
                    //}
                },
            });

            var currentUserID =  1; ");
                WriteLiteral(@"
            if (allowedIds.includes(currentUserID)) {
                calendar.setOption('headerToolbar', {
                    left: 'prev,next today', // Add your custom button here
                    center: 'title',
                    right: 'timeGridDay,listDay,timeGridWeek,listWeek,homePage,managerPage',
                });

                calendar.setOption('customButtons', {
                    homePage: {
                        text: '| Anasayfa |',
                        click: function () {
                            window.location.href = '/Home/Index';
                        }
                    },
                    managerPage: {
                        text: '➡',
                        click: function () {
                            window.location.href = '/PersonalWorkLog/ManagerLogTracking';
                        }
                    },
                });
            }
            else {
                calendar.setOption('headerToolbar', {
          ");
                WriteLiteral(@"      left: 'prev,next today', // Add your custom button here
                center: 'title',
                right: 'timeGridDay,listDay,timeGridWeek,listWeek,homePage',
                });
                calendar.setOption('customButtons', {
                    homePage: {
                        text: '| Anasayfa |',
                        click: function () {
                            window.location.href = '/Home/Index';
                        }
                    }
                });
            }

            calendar.render();
            globalCalendarInstance = calendar;
        });
        /////////////////////////////////////  POPUPS   ////////////////////////////////////////////////////

        window.addEventPopup = function (arg) {
            if (w2ui.addEventForm) {
                w2ui.addEventForm.destroy();
            }
            new w2form({
                name: 'addEventForm',
                style: 'border: 0px; background-color: transparent;',
   ");
                WriteLiteral(@"             fields: [
                    { field: 'wL_Project', required: true, html: { label: 'Proje', attr: 'autocomplete=""off""' }},
                    { field: 'wL_Title', required: true, html: { label: 'Tanım', attr: 'autocomplete=""off""' } },
                    { field: 'wL_Description', required: true, type: 'textarea', html: { label: 'Yapılan İş', attr: 'autocomplete=""off""' } },
                    { field: 'wL_StartDate', required: true, type: 'datetime', html: { label: 'Başlangıç Tarihi', attr: 'autocomplete=""off""' }, option: { format: ""DD.MM.YYYY HH:mm"" }},
                    { field: 'wL_FinishDate', required: true, type: 'datetime', html: { label: 'Bitiş Tarihi', attr: 'autocomplete=""off""' }, option: { format: ""DD.MM.YYYY HH:mm"" }},

                ],
                record: {
                    wL_StartDate: moment(arg.start).format(""DD.MM.YYYY HH:mm""),
                    wL_FinishDate: moment(arg.end).format(""DD.MM.YYYY HH:mm""),
                },
                onRender(even");
                WriteLiteral(@"t) {
                    var inputElement = document.querySelector('#w2ui-popup input[name=""wL_Title""]');
                    if (inputElement) {
                        inputElement.focus();
                    }
                },
                actions: {
                    /*Reset() { this.clear() },*/
                    saveCustomBtn: {
                        id: ""kaydet"",
                        //hidden : true,
                        text: ""YAPILAN İŞİ KAYDET"",
                        class: ""w2ui-btn w2ui-btn-blue"",
                        style: 'color: white;font-weight:bold',
                        onClick(event) {
                            this.validate()
                            console.log(this.validate())
                            if (this.validate().length > 0) {
                                console.log(""Zorunlu alanlar!"");
                            } else {
                                var formData = w2ui.addEventForm.record;
                         ");
                WriteLiteral(@"       var bas_tar = changeDatesForDB(formData.wL_StartDate);
                                var bit_tar = changeDatesForDB(formData.wL_FinishDate);
                                if (allblanksDataControl(formData)) {

                                    if (bit_tar > bas_tar) {

                                        w2popup.lock(""BAŞLATILIYOR..."", true)
                                        console.log(formData.wL_StartDate, formData.wL_FinishDate)
                                        var datalast = {
                                            WL_CreatedById:1, ");
                WriteLiteral(@"
                                            WL_Project: formData.wL_Project,
                                            WL_Title: formData.wL_Title,
                                            WL_Description: formData.wL_Description,
                                            WL_StartDate: bas_tar,
                                            WL_FinishDate: bit_tar,
                                        };
                                        const data = JSON.stringify(datalast);
                                        fetch('/PersonalWorkLog/CreateNewLog', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: data
                                        })
                                            .then(response => {
                           ");
                WriteLiteral(@"                     if (response.ok) {
                                                    return response.json();
                                                } else {
                                                    console.error('Veri gönderme hatası:', response.statusText);
                                                }
                                            })
                                            .then(data => {
                                                console.log(data.wL_CreatedById)
                                                globalCalendarInstance.unselect();
                                                var persid = data.wL_CreatedById;
                                                getPersonalDatas(persid)
                                                w2ui.addEventForm.refresh();
                                                w2popup.unlock()

                                                w2popup.close()
                                        ");
                WriteLiteral(@"        w2utils.notify('Başarıyla eklenmiştir.', { timeout: 1000, error: true, pos: 'top-right', })
                                            })
                                            .catch(error => {
                                                console.error('İstek hatası:', error);

                                            });

                                    }
                                    else {
                                        w2utils.notify('Lütfen girilen tarih bilgilerini kontrol ediniz.', { timeout: 2000, error: true, pos: 'top-right', })
                                    }

                                }
                                else {
                                    w2utils.notify('Lütfen gerekli bilgileri giriniz.', { timeout: 1000, error: true, pos: 'top-right', })
                                }


                            }
                        }

                    }
                },
            });
            //");
                WriteLiteral(@"}
            w2popup.open({
                //title: 'Form in a Popup',
                body: '<div id=""addEventform"" style=""width: 100%; height: 100%;""></div>',
                style: 'padding: 15px 0px 0px 0px;baclground-color:red',
                color: 'black',    // color of the screen lock
                opacity: 0,       // opacity of the screen lock
                speed: 0.3,       // speed popup appears
                //buttons: 'Popup Buttons',
                width: 400,
                height: 315,
                showMax: false,
                onClose: function(event)  {
                    globalCalendarInstance.unselect();
                },
                async onToggle(event) {
                    await event.complete
                    w2ui.addEventForm.resize();
                }
            })
                .then((event) => {
                    //w2ui.addEventForm.refresh()
                    //console.log(event)
                    w2ui.addEventForm.rend");
                WriteLiteral(@"er('#addEventform')
                });
        }
        window.editEventPopup = function (arg) {
            if (w2ui.formEdit) {
                w2ui.formEdit.destroy();
            }
            if (!w2ui.formEdit) {
                new w2form({
                    name: 'formEdit',
                    style: 'border: 0px; background-color: transparent;',
                    fields: [
                        { field: 'id', hidden: true, html: { label: 'ID' } },
                        { field: 'wL_Project', required: true, html: { label: 'Proje', attr: 'autocomplete=""off""' } },
                        { field: 'wL_Title', required: true, html: { label: 'Tanım', attr: 'autocomplete=""off""' } },
                        { field: 'wL_Description', required: true, type: 'textarea', html: { label: 'Yapılan İş', attr: 'autocomplete=""off""' } },
                        { field: 'wL_StartDate', required: true, type: 'datetime', html: { label: 'Başlangıç Tarihi', attr: 'autocomplete=""off""' }, option: ");
                WriteLiteral(@"{ format: ""DD.MM.YYYY HH:mm"" } },
                        { field: 'wL_FinishDate', required: true, type: 'datetime', html: { label: 'Bitiş Tarihi', attr: 'autocomplete=""off""' }, option: { format: ""DD.MM.YYYY HH:mm"" } },
                    ],
                    record: {
                        id: arg.event.id,
                        wL_Project: arg.event.extendedProps.project,
                        wL_Title: arg.event.title,
                        wL_Description: arg.event.extendedProps.description,
                        wL_StartDate: moment(arg.event.start).format(""DD.MM.YYYY HH:mm""),
                        wL_FinishDate: moment(arg.event.end).format(""DD.MM.YYYY HH:mm""),
                    },
                    //onRender(event) {
                    //    var inputElement = document.querySelector('#w2ui-formEdit input[name=""wL_Project""]');
                    //    if (inputElement) {
                    //        inputElement.focus();
                    //    }
               ");
                WriteLiteral(@"     //},
                    actions: {
                        deleteCustomBtn: {
                            id: ""deleteAction"",
                            //hidden : true,
                            text: ""KAYDI SİL"",
                            class: ""w2ui-btn w2ui-btn-red"",
                            style: 'color: white;font-weight:bold',
                            onClick(event) {
                                w2popup.lock(""SİLİNİYOR..."", true)
                                const url = '/PersonalWorkLog/deleteWorkLog?logid=' + w2ui.formEdit.record.id;
                                fetch(url, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    // Additional options...
                                })
                                    .then(function (response) {
            ");
                WriteLiteral(@"                            return response.json();
                                    })
                                    .then(function (data) {

                                        console.log(data)
                                        var persid = data.wL_CreatedById;
                                        getPersonalDatas(persid)
                                        w2popup.unlock()
                                        w2popup.close()
                                        w2utils.notify('Başarıyla silinmiştir.', { timeout: 1000, error: true, pos: 'top-right', })
                                    })
                                    .catch(function (error) {
                                        console.log('Veri gönderme hatası:', error);
                                    });
                            }
                        },
                        editCustomBtn: {
                            id: ""editAction"",
                            //hidden : tru");
                WriteLiteral(@"e,
                            text: ""DEĞİŞİKLİKLERİ KAYDET"",
                            class: ""w2ui-btn w2ui-btn-blue"",
                            style: 'color: white;font-weight:bold',
                            onClick(event) {
                                this.validate()
                                if (this.validate().length > 0) {
                                    console.log(""Zorunlu alanlar!"");
                                }
                                else {
                                    var formData = w2ui.formEdit.record;
                                    if (allblanksDataControl(formData)) {

                                        //console.log(formData.wL_StartDate, formData.wL_FinishDate)
                                        var bas_tar = changeDatesForDB(formData.wL_StartDate);
                                        var bit_tar = changeDatesForDB(formData.wL_FinishDate);
                                        if (bit_tar > bas_tar) {
          ");
                WriteLiteral(@"                                  w2popup.lock(""BAŞLATILIYOR..."", true)
                                             var datalast = {
                                                ID: formData.id,
                                                 WL_CreatedById: 1, ");
                WriteLiteral(@"
                                                WL_Project: formData.wL_Project,
                                                WL_Title: formData.wL_Title,
                                                WL_Description: formData.wL_Description,
                                                WL_StartDate: bas_tar,
                                                WL_FinishDate: bit_tar,
                                            };
                                            const data = JSON.stringify(datalast);
                                            fetch('/PersonalWorkLog/EditWorkLog', {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json'
                                                },
                                                body: data
                                            })
                                     ");
                WriteLiteral(@"           .then(response => {
                                                    if (response.ok) {
                                                        return response.json();
                                                    } else {
                                                        console.error('Veri gönderme hatası:', response.statusText);
                                                    }
                                                })
                                                .then(data => {
                                                    var persid = data.wL_CreatedById;
                                                    getPersonalDatas(persid)
                                                    w2ui.formEdit.refresh();
                                                    w2popup.unlock()
                                                    w2popup.close()
                                                    w2utils.notify('Başarıyla güncellenmiştir.', { timeou");
                WriteLiteral(@"t: 1000, error: true, pos: 'top-right', })
                                                })
                                                .catch(error => {
                                                    console.error('İstek hatası:', error);

                                                });
                                        }
                                        else {
                                            w2utils.notify('Lütfen girilen tarih bilgilerini kontrol ediniz.', { timeout: 2000, error: true, pos: 'top-right', })
                                        }

                                    }
                                    else {
                                        w2utils.notify('Lütfen gerekli bilgileri giriniz.', { timeout: 1000, error: true, pos: 'top-right', })
                                    }

                                }
                            }

                        },



                    }


                })");
                WriteLiteral(@";

            }
            else {
                console.log(""formEditi destroy etmek lazım"")
            }
            w2popup.open({
                title: false,
                body: '<div id=""editEventForm"" style=""width: 100%; height: 100%;""></div>',
                style: 'padding: 0px 0px 0px 0px',
                width: 400,
                height: 300,
                showMax: false,
                scrollX: false,
                onClose: function (event) {

                },
                async onToggle(event) {
                    await event.complete;
                    w2ui.formEdit.refresh()
                    w2ui.formEdit.resize();
                }
            })
            .then((event) => {
                w2ui.formEdit.refresh();
                w2ui.formEdit.render('#editEventForm')
            });
        }
        /////////////////////////////////////  FUNCTIONS   ////////////////////////////////////////////////////
        function formatDateTimeT");
                WriteLiteral(@"urkish(dateTime) {
            const options = {
                timeZone: ""Europe/Istanbul"",
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
                hour: ""2-digit"",
                minute: ""2-digit"",
            };
            return dateTime;
        }
        function changeDatesForDB(dateTimeString) {//12.10.2023 12:30 u dbformata dönüştürüyor
            console.log(dateTimeString);
            let isoDateString = null;

            if (dateTimeString != null) {
                const [datePart, timePart] = dateTimeString.split(' ');
                const [day, month, year] = datePart.split('.');
                const [hour, minute] = timePart.split(':');

                if (hour.length === 1) {
                    var newhour = '0' + hour;
                    console.log(newhour)
                    isoDateString = `${year}-${month}-${day}T${newhour}:${minute}:00`;

                }
                else {
           ");
                WriteLiteral(@"         console.log(hour)
                    isoDateString = `${year}-${month}-${day}T${hour}:${minute}:00`;

                }


            }

            return isoDateString;
        }
        function getPersonalDatas(persid) {
            if (persid != 0) {
                  fetch('/PersonalWorkLog/GetTodayPersonalData?persid='+ persid)
                    .then(function (response) {
                        return response.json();
                    })
                      .then(function (allData) {
                         // console.log(allData)
                           var aa = allData.map(function (event) {
                                return {
                                    id: event.id,
                                    title: event.wL_Title,
                                    project: event.wL_Project,
                                    description: event.wL_Description,
                                    creatorName: event.wL_CreatedBy,
               ");
                WriteLiteral(@"                     color: 'rgb(255,165,53,0.8)',// '#5389D6',
                                    borderColor: 'rgb(255,165,53)',
                                    start: moment(event.wL_StartDate).format(""YYYY-MM-DD HH:mm""),
                                    end: moment(event.wL_FinishDate).format(""YYYY-MM-DD HH:mm""),
                                };
                            });
                            if (aa.length == 0) {

                                    console.log(""Herhangi bir data yok"")
                            }
                          //console.log(""sdsdf"");
                          globalCalendarInstance.refetchEvents()

                    })
                      .catch(function (error) {
                          console.log('Veri gönderme hatası:' + error);
                    });
            }
        }
        function sendDraggedResizedEventToController(info) {
            const url = '/PersonalWorkLog/UpdateDatesOfDraggedResizedLog?logid=' + info.");
                WriteLiteral(@"event.id + '&dragStartDate=' + encodeURIComponent(formatDateTimeTurkish(info.event.start)) + '&dragFinishDate=' + encodeURIComponent(formatDateTimeTurkish(info.event.end));
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                // Additional options...
            })
            .then(function (response) {
                return response.json();
            })
            .then(function (allData) {
                // console.log(allData)
                if (!Array.isArray(allData)) {
                    allData = Object.values(allData);
                }
                var aa = allData.map(function (event) {
                    return {
                        id: event.id,
                        title: event.wL_Title,
                        project: event.wL_Project,
                        description: event.wL_Description,
                        creatorName: event");
                WriteLiteral(@".wL_CreatedBy,
                        color: 'rgb(255,165,53,0.6)',// '#5389D6',
                        borderColor: 'rgb(255,165,53)',
                        start: moment(event.wL_StartDate).format(""YYYY-MM-DD HH:mm""),
                        end: moment(event.wL_FinishDate).format(""YYYY-MM-DD HH:mm""),
                    };
                });
                if (aa.length == 0) {

                    console.log(""Herhangi bir data yok"")
                }
                globalCalendarInstance.refetchEvents()

            })
            .catch(function (error) {
                console.log('Veri gönderme hatası:', error);
            });

        }
        function allblanksDataControl(formData) {
            for (const field in formData) {
                if (!containsNonWhitespaceCharacters(formData[field])) {
                    return false; // If any field contains only white spaces or is empty, return false
                }
            }
            return true; // If all");
                WriteLiteral(@" fields contain non-whitespace characters, return true
        }
        function containsNonWhitespaceCharacters(value) {
            return /\S/.test(value);
        }
        /////////////////////////////////////     ////////////////////////////////////////////////////

    </script>
    <style>

        html, body {
            overflow: hidden;
            font-family: Arial, Helvetica Neue, Helvetica, sans-serif;
            font-size: 14px;
        }

        #calendar-container {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
        }

        .fc-header-toolbar {
            padding-top: 1em;
            padding-left: 1em;
            padding-right: 1em;
        }

        .custom-text {
            position: absolute;
            top: 0;
            right: 0;
            background-color: transparent;
            font-weight: 600;
            color: rgb(151 0 0);
            padding: 2px 5px;
 ");
                WriteLiteral("           font-size: 12px;\r\n        }\r\n    </style>\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ca7b80a5267a5b1be58b1ccf38da04223f505ed945891", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ca7b80a5267a5b1be58b1ccf38da04223f505ed947774", async() => {
                WriteLiteral("\r\n\r\n    <div id=\'calendar-container\'>\r\n        <div id=\'calendar\'></div>\r\n    </div>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
